{
  "version": 3,
  "sources": ["../src/zoom-levels.js"],
  "sourcesContent": ["(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonZoomLevels requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.zoomLevels = function(options) {\n        if (!this.zoomLevelsInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.zoomLevelsInstance = new $.ZoomLevels(options);\n        }\n        return this.zoomLevelsInstance;\n    };\n\n\n    /**\n     * @class ZoomLevels\n     * @classdesc Allows restricting the image zoom to specific levels\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     */\n    $.ZoomLevels = function(options) {\n        const self = this;\n\n        $.extend(true, self, {\n            // internal state properties\n            viewer: null,\n\n            // options\n            levels: [],\n        }, options);\n\n        sortZoomLevels(options.levels);\n\n        const viewport = self.viewer.viewport;\n        let zoom;\n        self.viewer.addHandler('zoom', function(e) {\n            if (zoom !== e.zoom) {\n                zoom = e.zoom;\n\n                if (zoom !== viewport.getHomeZoom()) {\n                    if (zoom < viewport.zoomSpring.current.value) {\n                        zoom = self.getLowerZoomLevel(zoom);\n                    } else if (zoom > viewport.zoomSpring.current.value) {\n                        zoom = self.getUpperZoomLevel(zoom);\n                    }\n                }\n\n                if (zoom !== e.zoom) {\n                    e.zoom = zoom;\n                    viewport.zoomTo(zoom, e.refPoint, e.immediately);\n                }\n            }\n        });\n    };\n\n    $.extend($.ZoomLevels.prototype, /** @lends OpenSeadragon.ZoomLevels.prototype */ {\n        /**\n         * Only used for fixed zoom levels. See zoomLevels in {@link OpenSeadragon.Options}.\n         * @function\n         * @param {Number} zoom - The desired zoom level\n         * @return {Number} The proper zoom level.\n         */\n        getUpperZoomLevel: function(zoom) {\n            if ($.isArray(this.levels) && this.levels.length) {\n                const viewport = this.viewer.viewport;\n                const imageZoom = viewport.viewportToImageZoom(zoom);\n                zoom = viewport.imageToViewportZoom(this.levels[this.levels.length - 1]);\n                for (let i = 0; i < this.levels.length; i++) {\n                    if (this.levels[i] > imageZoom) {\n                        zoom = viewport.imageToViewportZoom(this.levels[i]);\n                        break;\n                    }\n                }\n                return Math.min(\n                    zoom,\n                    viewport.getMaxZoom()\n                );\n            }\n            return zoom;\n        },\n\n        /**\n         * Only used for fixed zoom levels. See zoomLevels in {@link OpenSeadragon.Options}.\n         * @function\n         * @param {Number} zoom - The desired zoom level\n         * @return {Number} The proper zoom level.\n         */\n        getLowerZoomLevel: function(zoom) {\n            if ($.isArray(this.levels) && this.levels.length) {\n                const viewport = this.viewer.viewport;\n                const imageZoom = viewport.viewportToImageZoom(zoom);\n                zoom = viewport.imageToViewportZoom(this.levels[0]);\n                for (let i = this.levels.length - 1; i >= 0; i--) {\n                    if (this.levels[i] < imageZoom) {\n                        zoom = viewport.imageToViewportZoom(this.levels[i]);\n                        break;\n                    }\n                }\n                return Math.max(\n                    zoom,\n                    viewport.getMinZoom()\n                );\n            }\n            return zoom;\n        },\n    });\n\n    /**\n     * Sort zoom levels (if there are any) in numeric, ascending order\n     * @function\n     * @return {undefined}\n     */\n    function sortZoomLevels(levels) {\n        if ($.isArray(levels)) {\n            levels.sort(function(a, b) {\n                // numeric, ascending\n                return a - b;\n            });\n        }\n    }\n\n})(OpenSeadragon);\n"],
  "mappings": "OAAC,SAASA,EAAG,CACT,aAEA,GAAI,CAACA,EAAE,SAAWA,EAAE,QAAQ,MAAQ,EAChC,MAAM,IAAI,MAAM,+EAA+E,EAGnGA,EAAE,OAAO,UAAU,WAAa,SAASC,EAAS,CAC9C,OAAI,CAAC,KAAK,oBAAsBA,KAC5BA,EAAUA,GAAW,CAAC,EACtBA,EAAQ,OAAS,KACjB,KAAK,mBAAqB,IAAID,EAAE,WAAWC,CAAO,GAE/C,KAAK,kBAChB,EASAD,EAAE,WAAa,SAASC,EAAS,CAC7B,IAAMC,EAAO,KAEbF,EAAE,OAAO,GAAME,EAAM,CAEjB,OAAQ,KAGR,OAAQ,CAAC,CACb,EAAGD,CAAO,EAEVE,EAAeF,EAAQ,MAAM,EAE7B,IAAMG,EAAWF,EAAK,OAAO,SACzBG,EACJH,EAAK,OAAO,WAAW,OAAQ,SAASI,EAAG,CACnCD,IAASC,EAAE,OACXD,EAAOC,EAAE,KAELD,IAASD,EAAS,YAAY,IAC1BC,EAAOD,EAAS,WAAW,QAAQ,MACnCC,EAAOH,EAAK,kBAAkBG,CAAI,EAC3BA,EAAOD,EAAS,WAAW,QAAQ,QAC1CC,EAAOH,EAAK,kBAAkBG,CAAI,IAItCA,IAASC,EAAE,OACXA,EAAE,KAAOD,EACTD,EAAS,OAAOC,EAAMC,EAAE,SAAUA,EAAE,WAAW,GAG3D,CAAC,CACL,EAEAN,EAAE,OAAOA,EAAE,WAAW,UAA4D,CAO9E,kBAAmB,SAASK,EAAM,CAC9B,GAAIL,EAAE,QAAQ,KAAK,MAAM,GAAK,KAAK,OAAO,OAAQ,CAC9C,IAAMI,EAAW,KAAK,OAAO,SACvBG,EAAYH,EAAS,oBAAoBC,CAAI,EACnDA,EAAOD,EAAS,oBAAoB,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,CAAC,EACvE,QAASI,EAAI,EAAGA,EAAI,KAAK,OAAO,OAAQA,IACpC,GAAI,KAAK,OAAOA,CAAC,EAAID,EAAW,CAC5BF,EAAOD,EAAS,oBAAoB,KAAK,OAAOI,CAAC,CAAC,EAClD,KACJ,CAEJ,OAAO,KAAK,IACRH,EACAD,EAAS,WAAW,CACxB,CACJ,CACA,OAAOC,CACX,EAQA,kBAAmB,SAASA,EAAM,CAC9B,GAAIL,EAAE,QAAQ,KAAK,MAAM,GAAK,KAAK,OAAO,OAAQ,CAC9C,IAAMI,EAAW,KAAK,OAAO,SACvBG,EAAYH,EAAS,oBAAoBC,CAAI,EACnDA,EAAOD,EAAS,oBAAoB,KAAK,OAAO,CAAC,CAAC,EAClD,QAASI,EAAI,KAAK,OAAO,OAAS,EAAGA,GAAK,EAAGA,IACzC,GAAI,KAAK,OAAOA,CAAC,EAAID,EAAW,CAC5BF,EAAOD,EAAS,oBAAoB,KAAK,OAAOI,CAAC,CAAC,EAClD,KACJ,CAEJ,OAAO,KAAK,IACRH,EACAD,EAAS,WAAW,CACxB,CACJ,CACA,OAAOC,CACX,CACJ,CAAC,EAOD,SAASF,EAAeM,EAAQ,CACxBT,EAAE,QAAQS,CAAM,GAChBA,EAAO,KAAK,SAASC,EAAGC,EAAG,CAEvB,OAAOD,EAAIC,CACf,CAAC,CAET,CAEJ,GAAG,aAAa",
  "names": ["$", "options", "self", "sortZoomLevels", "viewport", "zoom", "e", "imageZoom", "i", "levels", "a", "b"]
}
